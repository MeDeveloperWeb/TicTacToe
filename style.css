*:not(dialog){
    box-sizing: border-box;
    padding: 0;
    margin: 0;
}

body {
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
}

main {
    gap: 2rem;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.btnCont {
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    gap: 10px;
    padding: 0 0.5rem;
    flex-wrap: wrap;
}

.playerCont .showPlayerForm {
    font-size: 30px;
    color: inherit;
    cursor: pointer;
    order: 1;
}

.textInput {
    position: relative;
    height: 4rem;
    width: 32ch;
    display: flex;
    justify-content: space-evenly;
    align-items: center;

    & > label {
        position: absolute;
        cursor: text;

        &:has(~ input:focus, ~ input:valid) {
            top: 0;
            left: 1rem;
            background-color: limegreen;
            color: white;
            padding: 0.2rem 0.4rem;
        }
    }

    & > input {
        align-self: flex-end;
        height: calc(100% - 0.5rem);
        width: 100%;
        border-radius: 5px;
        border: 1px solid gray;
        outline: none;
        text-align: center;
        font-size: 1.1rem;

        &:is(:focus, :valid){
            border: 2px solid limegreen;
        }

    }
}

.textInput.player {
    width: min(32ch, 40vw);
}

.player .removePlayer {
    position: absolute;
    top: 0;
    right: 5px;
    padding: 1px;
    color: rgb(252, 17, 17);
    cursor: pointer;
    display: none;

    &:has(~ input:focus) {
        display: initial;
    }

}

.player > input:has(+.active) {
    border: 4px solid aqua;
}

.active {
    display: none;
}

div.boardCont {
    display: grid;
    grid-template-rows: 1fr 1fr 1fr;
    width: calc(min(98vw, 600px));
    height: calc(min(98vw, 600px));
}

.row {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;

    & .col {
        border: 2px solid;
        font-size: 5vw;
        display: flex;
        justify-content: center;
        align-items: center;

        &:first-of-type {
            border-left: 0px;
        }
        &:last-of-type {
            border-right: 0px;
        }

        &.winningCell {
            background-color: rgb(40, 226, 40);
        }
    }

    &:first-of-type {
        & .col {
            border-top: 0px;
        }
    }
    &:last-of-type {
        & .col {
            border-bottom: 0px;
        }
    }
}

button, .btn {
    padding: 0.5rem 1rem;
    font-size: 1.02rem;
    font-family:'Courier New', Courier, monospace;
    border: 2px solid;
    background-color: rgb(2, 106, 224);
    color: white;
    cursor: pointer;
}

input#tttGridSizeText {
    width: 3ch;
    outline: none;
    text-align: center;

    &::-webkit-inner-spin-button, 
    &::-webkit-outer-spin-button { 
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        margin: 0; 
    }
}

.resetGame {
    visibility: hidden;
    max-height: 0;
}

.gameWinner {
    position: absolute;
    top: -10px;
    left: auto;
    right: auto;
    color: rgb(255, 196, 0);
    font-size: 30px;
}

.btn.startGame {
    background-color: rgb(0, 168, 0);
}

dialog {
    max-width: 85vw;
    border-radius: 10px;
}

.playerFormCont > form {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    margin: 2rem;
}

.errors > div{
    display: flex;
    gap: 2rem;
    padding-bottom: 2rem;

    & .icon:not(.close){
        background-color: rgba(252, 88, 88, 0.2);
        border-radius: 2rem;
        font-size: 2rem;
        padding: 0 1rem;
        color: red;
    }

    & .icon.close {
        background-color: #e0e0e0;
        border-radius: 2rem;
        padding: 0 0.5rem;
        height: fit-content;
    }

    & .msgCont {
        flex: 1;
        display: flex;
        justify-content: center;
        width: fit-content;
        color: rgb(187, 0, 0);
    }
}